@startuml
package BladeRondo
{
    package Game
    {
        package Component
        {
            package CardState
            {
                class None
                class Usable
                class Unusable
                class SetResponce
                class Attack
                class Attacked
                class ActivatableAbility
                class ActivatedAbility
                class Discard
            }
            class Card
            {
                +<<property>>Id:int{private set}
                +<<property>>Name:string{private set}
                +<<property>>AbilityText:string{private set}
                +<<property>>Cost:int{private set}
                +<<property>>Limited:bool{private set}
                +<<property>>Symbol:CardType{private set}
                +<<property>>AttackPower:int{private set}
                +<<property>>Responceable:List<CardTYpe>{private set}
                +<<property>>Face:Sprite{private set}
                +<<property>>InHand:bool{get only}
                --
                +<<delegate>>Ability():void
                +Abilities:Ability
                +<<delegate>>Check():bool
                +CanActivateAbility:Check
                --
                Init(Id:int):void
                CanPlay():bool
                Play():void
                PayCost():void
            }
            class CardData
            {
                -id:int
                -name:string
                -abilityText:string
                -cost:int
                -limited:bool
                -symbol:CardType
                -attackPower:int
                -responceable:List<CardType>
                +<<property>>Id:int{get only}
                +<<property>>Name:string{get only}
                +<<property>>AbilityText:string{get only}
                +<<property>>Cost:int{get only}
                +<<property>>Limited:bool{get only}
                +<<property>>Symbol:CardType{get only}
                +<<property>>AttackPower:int{get only}
                +<<property>>Responceable:List<CardType>{get only}
            }
            class CardView
            {
                -FaceDetail:GameObject
                -Back:Sprite
                -Face:Image
                +Init(card:Card):void
                +ToggleFace(isFace:bool):void
            }
            class CardState
            {
                +<<property>>StatusType:CardStateType
                +<<property>>Status:IState
            }
            class CardController
            {
                ChangeParent(newParentName:string):void
            }
            class CardAnimation
            class CardAbilityUtil
            class CardPlayCheckUtil
            class CardAbilityCheckUtil
            class Hand
            class Graveyard
            class PlayArea
            {
                +Put():void
            }
            enum CardStateType
            {
                None,
                Usable,
                Unusable,
                SetResponce,
                Attack,
                Attacked,
                ActivatableAbility,
                ActivatedAbility,
                Discard,
            }
            enum CardType
            {
                Breath
                Physical
                Magical
                Support
                Trap
            }
        }
        class NetworkCardFactory
        class LocalCardFactory
    }
    package Network
    {
        package CustomProperties
        {
            package Players
            {
                class HP
                class "Attack "
                class Defence
                class Voltage

                class StartCheck
            }
            package Rooms
            {
                class Deck
            }
        }
        package RaiseEvents
        {
            class PutCard
            class RaiseEventPractitioner
            enum RaiseEventType
            {
                PutCard
            }
        }
        interface IConnecter
        class ServerConnecter
        class RoomConnecter
        class GameConnecter
        class RoomCreater
        class RoomExiter
        class RoomJoiner
    }
    package System
    {
        package TurnState
        {
            package Phases
            {
                class BattleSetup
                class FirstPick
                class Standby
                class Main
                class End
            }
            package Steps
            {
                class VoltageRefflesh
                class ActivateAttachedAbility
                class AcitvateDeploymentsAbility
                class ReturnCards
            }
        }
        interface IFactory<T>
        {
            +Create(str:string):T
        }
        interface IState
        {
            +Execute():void
        }
        class DebugManager
        class TurnManager
        {
            -NowPhase:IState
        }
    }
    package UI
    {
        class CardDropArea
        class RoomIdViewer
        class PlayerNode
        class GameStartChecker
        class Counter
        class PlayerParameters
        class CardPicker
        {
            -Contens:GameObject
            -CheckmarkFactory:IFactory
        }
        class CheckmarkFactory
    }
}

IState <|.left. None
IState <|.left. Usable
IState <|.left. Unusable
IState <|.left. Attack
IState <|.left. Attacked
IState <|.left. ActivatableAbility
IState <|.left. ActivatedAbility
IState <|.left. Discard
IState <|.left. SetResponce

IState <|.down. BattleSetup
IState <|.down. FirstPick
IState <|.down. Standby
IState <|.down. Main
IState <|.down. End

IState <|.down. VoltageRefflesh
IState <|.down. ActivateAttachedAbility
IState <|.down. AcitvateDeploymentsAbility

IFactory <|.. CheckmarkFactory

IFactory <|.down. NetworkCardFactory
IFactory <|.down. LocalCardFactory

NetworkCardFactory .down.> Card : create
LocalCardFactory .down.> Card : create
Card ..> CardData : read
Card ..> CardAbilityUtil : set delegate
Card ..> CardAbilityCheckUtil : set delegate
Card ..> CardPlayCheckUtil : set delegate
ScriptableObject <|-up- CardData
IBeginDragHandler <|.. CardController
IDragHandler <|.. CardController
IEndDrafHandler <|.. CardController
IDropHandler <|.. CardDropArea

IConnecter <|.. ServerConnecter
IConnecter <|.. RoomConnecter
IConnecter <|.. GameConnecter

IOnEventCallback <|.. RaiseEventPractitioner

PlayerParameters -- Counter
@enduml