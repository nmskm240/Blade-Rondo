@startuml
package BladeRondo
{
    package Game
    {
        package Component
        {
            ' package CardState
            ' {
                '     class None
                '     class Use
                '     class SetResponce
                '     class Attack
                '     class ActivateEffect
                '
            ' }
            package Effect
            {
                package Attachable
                {
                    class 各種付与効果
                }
                interface IEffect
                {
                    +CanActivate():bool
                    +Activate():void
                }
                class 各種効果
            }
            class Card
            {
                +<<property>>ID:int{private set}
                +<<property>>Name:string{private set}
                +<<property>>EffectText:string{private set}
                +<<property>>EffectTiming:EffectTiming{private set}
                +<<property>>Effects:IEnumerable<IEffect>{private set}
                +<<property>>Cost:int{private set}
                +<<property>>Limited:bool{private set}
                +<<property>>Symbol:CardType{private set}
                +<<property>>CanResponce{private set}
                +<<property>>Responceable:IEnumerable<CardTYpe>{private set}
                +<<property>>Face:Sprite{private set}
                +<<property>>InHand:bool{get only}
                +<<property>>CanPlay:bool{get only}
                --
                +Init(Id:int):void
                +PayCost():void
                +ActivateEffect():void
            }
            class CardData
            {
                -_id:int
                -_name:string
                -_effectText:string
                -_effectTiming:EffectTiming
                -_effects:List<IEffect>
                -_cost:int
                -_limited:bool
                -_symbol:CardType
                -_canResponce:bool
                -_responceable:List<CardType>
                +<<property>>ID:int{get only}
                +<<property>>Name:string{get only}
                +<<property>>EffectText:string{get only}
                +<<property>>EffectTiming:EffectTiming{get only}
                +<<property>>Effects:IEnumerable<IEffect>{get only}
                +<<property>>Cost:int{get only}
                +<<property>>Limited:bool{get only}
                +<<property>>Symbol:CardType{get only}
                +<<property>>CanResponce:bool{get only}
                +<<property>>Responceable:IEnumerable<CardType>{get only}
            }
            class CardView
            {
                -_name:Text
                -_cost:Text
                -_back:Sprite
                -_face:Image
                +Init(card:Card):void
                +ToggleFace(isFace:bool):void
            }
            ' class CardState
            ' {
                '     +<<property>>StatusType:CardStateType
                '     +<<property>>Status:IState
                '
            ' }
            class CardController
            {
                ChangeParent(newParentName:string):void
            }
            class CardAnimation
            class Cemetery
            class PlayArea
            {
                +Put():void
            }
            ' enum CardStateType
            ' {
                '     None,
                '     Use,
                '     SetResponce,
                '     Attack,
                '     ActivateEffect,
                '
            ' }
            enum CardType
            {
                Breath
                Physical
                Magical
                Support
                Trap
            }
        }
        class NetworkCardFactory
        class LocalCardFactory
    }
    package Network
    {
        package CustomProperties
        {
            package Players
            {
                class HP
                class "Attack "
                class Defence
                class Voltage
                class PickCards
                class StartCheck
                class AttachedEffects;
            }
            package Rooms
            {
                class Deck
                class TurnPlayer
            }
        }
        package RaiseEvents
        {
            abstract class RaiseEventPractitioner
            {
                +IOnEventCallback(photonEvent:EventData):void
            }
            enum RaiseEventType
            {
                PlayCard,
            }
            class PlayCard
        }
        interface IConnecter
        class ServerConnecter
        class RoomConnecter
        class GameConnecter
        class RoomCreater
        class RoomExiter
        class RoomJoiner
    }
    package System
    {
        package TurnState
        {
            package Phases
            {
                class BattleSetup
                class FirstPick
                class Standby
                class Main
                class End
            }
            package Steps
            {
                class VoltageRefflesh
                class ActivateAttachedEffect
                class AcitvateDeploymentsEffect
                class EnemyReturn
                class PlayerReturn
            }
        }
        interface IFactory<T>
        {
            +Create(i:int):T
        }
        interface IState
        {
            +Execute():void
        }
        interface IObserver<T>
        {
            +ReceiveNotify(data:T):void
        }
        abstract class MonoBehaviourSubject<T>
        {
            -_observers:List<IObserver<T>>
            +AddObserver(observer:IObserver<T>)
            +RemoveObserver(observer:IObserver<T>)
            +ContainsObserver(observer:IObserver<T>)
            +NotifyObservers(pushData:T):void
        }
        class DebugManager
        class TurnManager
        {
            -_nowPhase:IState
        }
        enum EffectTiming
        {
            None,
            Forging,
            PayCostAndCompensation,
            SymbolMove,
            TrapActivate,
            BeforeAttackEffectActivation,
            AttackConfirm,
            DefenceConfirm,
            CalDamage,
            CorrectionDamage,
            Addition,
            SymbolMoveEnd,
            ImmediatelyAfterAttack,
        }
    }
    package UI
    {
        class CardDropArea
        {
            -_playArea:PlayArea
        }
        class RoomIDViewer
        class PlayerNode
        class GameStartChecker
        class Counter
        class PlayerAttachedEffects
        class PlayerParameters
        class CardPicker
        {
            -_contens:GameObject
            -_checkmarkFactory:IFactory
        }
        class CheckmarkFactory
    }
}

' IState <|.left. None
' IState <|.left. Use
' IState <|.left. Attack
' IState <|.left. ActivateEffect
' IState <|.left. SetResponce

IState <|.down. BattleSetup
IState <|.down. FirstPick
IState <|.down. Standby
IState <|.down. Main
IState <|.down. End

IState <|.down. VoltageRefflesh
IState <|.down. ActivateAttachedEffect
IState <|.down. AcitvateDeploymentsEffect
IState <|.down. EnemyReturn
IState <|.down. PlayerReturn

Standby -- VoltageRefflesh
Standby -- ActivateAttachedEffect
Standby -- AcitvateDeploymentsEffect

End -- EnemyReturn
End -- PlayerReturn

IFactory <|.. CheckmarkFactory

IFactory <|.down. NetworkCardFactory
IFactory <|.down. LocalCardFactory

NetworkCardFactory .down.> Card : create
LocalCardFactory .down.> Card : create
Card ..> CardData : read
Card <|.. IObserver

PlayArea --|> MonoBehaviourSubject
PlayArea o.left.> Card : notify

ScriptableObject <|-up- CardData
IBeginDragHandler <|.down. CardController
IDragHandler <|.down. CardController
IEndDrafHandler <|.down. CardController
IDropHandler <|.down. CardDropArea

IEffect <|.left. 各種効果
IEffect <|.left. 各種付与効果

IConnecter <|.. ServerConnecter
IConnecter <|.. RoomConnecter
IConnecter <|.. GameConnecter

PlayerParameters -- Counter

RaiseEventPractitioner <|-- PlayCard

Player -down- HP : Extension Methods
Player -down- "Attack " : Extension Methods
Player -down- Defence : Extension Methods
Player -down- PickCards : Extension Methods
Player -down- StartCheck : Extension Methods
Player -down- Voltage : Extension Methods

Room -up- Deck : Extension Methods
Room -up- TurnPlayer : Extension Methods

@enduml